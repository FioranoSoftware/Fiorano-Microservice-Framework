/*
 * Copyright (c) Fiorano Software and affiliates. All rights reserved. http://www.fiorano.com
 * The software in this package is published under the terms of the CPAL v1.0
 * license, a copy of which has been included with this distribution in the
 * LICENSE.txt file.
 */
package com.fiorano.services.cache.engine;

import com.fiorano.edbc.cache.configuration.CachePM;
import com.fiorano.edbc.framework.service.exception.ServiceErrorID;
import com.fiorano.edbc.framework.service.exception.ServiceExecutionException;
import com.fiorano.edbc.framework.service.internal.IModule;
import com.fiorano.edbc.framework.service.internal.Module;
import com.fiorano.edbc.framework.service.internal.engine.IRequestProcessor;
import com.fiorano.edbc.framework.service.internal.engine.IRequestValidator;
import com.fiorano.services.cache.engine.storage.CacheEntry;
import com.fiorano.services.common.util.RBUtil;
import com.fiorano.util.StringUtil;
import org.xml.sax.InputSource;

import java.io.StringReader;
import java.util.Iterator;
import java.util.Observable;
import java.util.Observer;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * Process the request and returns the output.
 *
 * @author FSTPL
 */
public class CacheRequestProcessor extends Module implements IRequestProcessor<String, String>, Observer {

    private RequestParser parser;
    private ResponseBuilder builder;
    private ICacheCommand cacheCommand;
    private boolean enableValidation;
    private IRequestValidator<String> requestValidator;

    public CacheRequestProcessor(IModule parent, CachePM configuration, ICacheCommand cacheCommand, Logger logger) {
        super(parent);
        this.cacheCommand = cacheCommand;
        RequestHandler handler = new RequestHandler(configuration, logger);
        handler.addObserver(this);
        this.parser = new RequestParser(handler);
        this.builder = new ResponseBuilder(logger);
        this.enableValidation = configuration.isInputValidationEnabled();
        this.logger = logger;
    }

    /**
     * validates the request, parses, processes the request and returns the response xml
     *
     * @param request xml
     * @return xml containing the response
     * @throws CacheException
     */
    public String process(String request) throws ServiceExecutionException {
        if (StringUtil.isEmpty(request)) {
            throw new ServiceExecutionException(RBUtil.getMessage(com.fiorano.edbc.cache.configuration.Bundle.class, com.fiorano.edbc.cache.configuration.Bundle.EMPTY_INPUT), ServiceErrorID.INVALID_REQUEST_ERROR);
        }
        if (enableValidation) {
            requestValidator.validate(request);
        }
        try {
            builder.initialize();
            parser.parseRequest(new InputSource(new StringReader(request)));
        } catch (CacheException e) {
            logger.log(Level.SEVERE, e.getLocalizedMessage(), e);
            throw new ServiceExecutionException(e, ServiceErrorID.REQUEST_EXECUTION_ERROR);
        }
        return builder.close();
    }

    /**
     * listens to events generated by RequestHandler and performs the operation on storage
     *
     * @param o
     * @param entry
     */
    public void update(Observable o, Object entry) {

        if (entry == RequestHandler.ALL_ENTRIES) {
            try {
                Iterator entryIterator = cacheCommand.executeAll();
                while (entryIterator != null && entryIterator.hasNext()) {
                    CacheEntry cacheEntry = (CacheEntry) entryIterator.next();
                    builder.addCacheEntry(cacheEntry);
                }
            } catch (CacheException e) {
                logger.log(Level.SEVERE, RBUtil.getMessage(Bundle.class, Bundle.FAILED_TO_FETCH_ENTRIES), e);
            }
        }

        if (!(entry instanceof CacheEntry)) {
            return;
        }

        try {
            builder.addCacheEntry(cacheCommand.execute((CacheEntry) entry));
        } catch (CacheException e) {
            logger.log(Level.SEVERE, RBUtil.getMessage(Bundle.class, Bundle.FAILED_TO_PROCESS_ENTRY, new Object[]{entry}), e);
        }
    }

    public IRequestValidator<String> getRequestValidator() {
        return requestValidator;
    }

    public void setRequestValidator(IRequestValidator<String> requestValidator) {
        this.requestValidator = requestValidator;
    }
}
